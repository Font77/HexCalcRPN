package com.alloydflanagan.hexcalcrpn.main


import android.content.Intent
import android.view.View
import android.view.ViewGroup
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.*
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.LargeTest
import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.rule.ActivityTestRule
import com.alloydflanagan.hexcalcrpn.R
import com.alloydflanagan.hexcalcrpn.model.AppPreferences
import com.alloydflanagan.hexcalcrpn.model.BitsPreference
import org.hamcrest.Description
import org.hamcrest.Matcher
import org.hamcrest.Matchers.allOf
import org.hamcrest.TypeSafeMatcher
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import kotlin.test.BeforeTest
import kotlin.test.assertEquals

@LargeTest
@RunWith(AndroidJUnit4::class)
class SaveLastWordSizeTest {

    private lateinit var prefs: AppPreferences

    // test rule for main activity. We do NOT launch it yet.
    @Rule
    @JvmField
    var mActivityTestRule = ActivityTestRule(MainActivity::class.java, true, false)

    // match radio button with a given id at `position` in the size fragment.
    private fun radioButtonAt(anId: Int, position: Int) = onView(
            allOf(withId(anId),
                    childAtPosition(
                            withId(R.id.size_fragment),
                            position),
                    isDisplayed()))

    @BeforeTest
    fun setupPrefs() {
        val packageContext = InstrumentationRegistry.getInstrumentation().targetContext
        prefs = AppPreferences(packageContext)
        prefs.prefInitSize = BitsPreference.PREVIOUS
        prefs.lastWordSize = BitsPreference.THIRTY_TWO
        // val intent = Intent(packageContext, MainActivity::class.java)
        mActivityTestRule.launchActivity(Intent())
    }

    @Test
    fun useLastWordSizeTest() {
        assertLastSizeIs(BitsPreference.THIRTY_TWO)
        val radioButton = radioButtonAt(R.id.radio_32, 2)
        radioButton.check(matches(isChecked()))
    }

    @Test
    fun saveLastWordSizeTest() {

        assertInitPrefIs(BitsPreference.PREVIOUS)
        assertLastSizeIs(BitsPreference.THIRTY_TWO)

        val radioButton8 = radioButtonAt(R.id.radio_8, 0)
        val radioButton16 = radioButtonAt(R.id.radio_16, 1)
        val radioButton32 = radioButtonAt(R.id.radio_32, 2)
        val radioButton64 = radioButtonAt(R.id.radio_64, 3)
        val radioButtonInf = radioButtonAt(R.id.radio_inf, 4)

        radioButton8.perform(click())
        radioButton8.check(matches(isChecked()))
        assertLastSizeIs(BitsPreference.EIGHT)

        radioButton16.perform(click())
        radioButton16.check(matches(isChecked()))
        assertLastSizeIs(BitsPreference.SIXTEEN)

        radioButton32.perform(click())
        radioButton32.check(matches(isChecked()))
        assertLastSizeIs(BitsPreference.THIRTY_TWO)

        radioButton64.perform(click())
        radioButton64.check(matches(isChecked()))
        assertLastSizeIs(BitsPreference.SIXTY_FOUR)

        radioButtonInf.perform(click())
        radioButtonInf.check(matches(isChecked()))
        assertLastSizeIs(BitsPreference.INFINITE)
    }

    private fun assertLastSizeIs(expected: BitsPreference) {
        assertThat(prefs.lastWordSize, PrefsMatcher(expected))
        assertEquals(expected, prefs.lastWordSize)
    }

    private fun assertInitPrefIs(expected: BitsPreference) {
        assertEquals(expected, prefs.prefInitSize)
    }

    /* function auto-generated by Espresso */
    private fun childAtPosition(
            parentMatcher: Matcher<View>, position: Int): Matcher<View> {

        return object : TypeSafeMatcher<View>() {
            override fun describeTo(description: Description) {
                description.appendText("Child at position $position in parent ")
                parentMatcher.describeTo(description)
            }

            public override fun matchesSafely(view: View): Boolean {
                val parent = view.parent
                return parent is ViewGroup && parentMatcher.matches(parent)
                        && view == parent.getChildAt(position)
            }
        }
    }

    /**
     * Simplest possible matcher to verify that a BitsPreference value is equal to the expected value.
     */
    class PrefsMatcher(private val expected: BitsPreference): TypeSafeMatcher<BitsPreference>() {
        /**
         * Generates a description of the {@link BitsPreference} value.
         *
         * @param description
         * The description to be built or appended to.
         */
        override fun describeTo(description: Description) {
            description.appendText("<$expected>")
        }

        /**
         * @return Boolean true if item equals the expected value.
         */
        override fun matchesSafely(item: BitsPreference?): Boolean = item == expected
    }
}
